pipeline {
    agent any
    tools {
        maven "maven3"
    }
    environment {
        registry = "855607364597.dkr.ecr.ap-northeast-2.amazonaws.com/demo-app"
    }

    stages {
        stage('CheckOut') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/clove1024/springboot-app']]])
            }
        }
        stage('BuildJar') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('BuildImage') {
            steps {
                script {
                    docker.build registry
                }
            }
        }
        stage('ImagePushToECR') {
            steps {
                sh "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 855607364597.dkr.ecr.ap-northeast-2.amazonaws.com"
                sh "docker push $registry:latest"
            }
        }
        stage('DeployK8S') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'mrn-k8s-config', namespace: 'mrm', serverUrl: '') {
                    sh 'kubectl apply -f eks-deploy-k8s.yaml'
                }
            }
        }
    }
}

node {
  
  def image
  def mvnHome = tool 'Maven3'

  
     stage ('checkout') {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '9ffd4ee4-3647-4a7d-a357-5e8746463282', url: 'https://bitbucket.org/ananthkannan/myawesomeangularapprepo/']]])       
        }
    
    
    stage ('Build') {
            sh 'mvn -f MyAwesomeApp/pom.xml clean install'            
        }
        
    stage ('archive') {
            archiveArtifacts '**/*.jar'
        }
        
    stage ('Docker Build') {
         // Build and push image with Jenkins' docker-plugin
        withDockerServer([uri: "tcp://localhost:4243"]) {

            withDockerRegistry([credentialsId: "fa32f95a-2d3e-4c7b-8f34-11bcc0191d70", url: "https://index.docker.io/v1/"]) {
            image = docker.build("ananthkannan/mywebapp", "MyAwesomeApp")
            image.push()
            
            }
        }
    }
    
       stage('docker stop container') {
            sh 'docker ps -f name=myContainer -q | xargs --no-run-if-empty docker container stop'
            sh 'docker container ls -a -fname=myContainer -q | xargs -r docker container rm'

       }

    stage ('Docker run') {

        image.run("-p 8085:8085 --rm --name myContainer")

    }
}
